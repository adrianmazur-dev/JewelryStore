@model JewelryStore.Application.DTOs.ProductDto
@inject JewelryStore.Application.Interfaces.ICategoryService CategoryService
@inject JewelryStore.Application.Interfaces.IProductImageService ProductImageService
@{
    var categories = await CategoryService.GetAllAsync();
}

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Edycja produktu: @Model.Name</h5>
    </div>
    <div class="card-body">
        <ul class="nav nav-tabs" id="productTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab">
                    <i class="bi bi-info-circle"></i> Informacje
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#images" type="button" role="tab">
                    <i class="bi bi-images"></i> Zdjęcia (@Model.Images.Count)
                </button>
            </li>
        </ul>

        <div class="tab-content pt-4" id="productTabsContent">
            <div class="tab-pane fade show active" id="info" role="tabpanel">
                <form asp-action="Edit" method="post">
                    <input type="hidden" asp-for="Id" />

                    <div class="mb-3">
                        <label asp-for="Name" class="form-label">Nazwa</label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Description" class="form-label">Opis</label>
                        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="CategoryId" class="form-label">Kategoria</label>
                        <select asp-for="CategoryId" class="form-select" asp-items="@(new SelectList(categories, "Id", "Name", Model.CategoryId))">
                            <option value="">Wybierz kategorię...</option>
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>

                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-save"></i> Zapisz zmiany
                    </button>
                </form>
            </div>

            <div class="tab-pane fade" id="images" role="tabpanel">
                <form id="imageUploadForm">
                    <div class="mb-3">
                        <label for="imageInput" class="form-label">Wybierz zdjęcia</label>
                        <input type="file" id="imageInput" class="form-control" accept="image/*" multiple
                               onchange="previewImages(this)" />
                    </div>

                    <div id="uploadPreview" class="mb-3 d-flex flex-wrap gap-2" style="display: none !important;"></div>

                    <div class="progress mb-3" style="display: none;">
                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                    </div>

                    <button type="button" onclick="uploadImages()" class="btn btn-primary">
                        <i class="bi bi-cloud-upload"></i> Wgraj zdjęcia
                    </button>
                </form>

                <hr class="my-4">

                <div class="current-images">
                    <h6 class="mb-3">Aktualne zdjęcia</h6>
                    <div id="imagePreview" class="d-flex flex-wrap gap-3">
                        @foreach (var image in Model.Images.OrderBy(x => x.Order))
                        {
                            <div class="position-relative">
                                <div class="card" style="width: 200px;">
									<span class="card-subtitle">@image.FileName</span>
                                    <img src="@Url.Action("Get", "ProductImage", new { id = image.Id })"
                                         class="card-img-top"
                                         style="height: 200px; object-fit: cover;"
                                         alt="@Model.Name" />
                                    @{
                                        var position = await ProductImageService.GetImagePositionAsync(image.Id);
                                    }
                                    <div class="card-body p-2 text-center">
                                        <div class="btn-group">
                                            @if (!position.isFirst)
                                            {
                                                <button onclick="reorderImage(@image.Id, 'up')" class="btn btn-outline-primary btn-sm">
                                                    <i class="bi bi-arrow-up"></i>
                                                </button>
                                            }
                                            <button onclick="deleteImage(@image.Id)" class="btn btn-danger btn-sm">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                            @if (!position.isLast)
                                            {
                                                <button onclick="reorderImage(@image.Id, 'down')" class="btn btn-outline-primary btn-sm">
                                                    <i class="bi bi-arrow-down"></i>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function previewImages(input) {
            const preview = document.getElementById('uploadPreview');
            preview.innerHTML = '';
            preview.style.display = 'flex';

            Array.from(input.files).forEach(file => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const div = document.createElement('div');
                    div.className = 'card';
                    div.style.width = '200px';
                    div.innerHTML = `
                        <img src="${e.target.result}" class="card-img-top"
                             style="height: 200px; object-fit: cover;">
                        <div class="card-body p-2 text-center">
                            <small class="text-muted">${file.name}</small>
                        </div>
                    `;
                    preview.appendChild(div);
                }
                reader.readAsDataURL(file);
            });
        }

        async function reorderImage(imageId, direction) {
           try {
               const response = await fetch(`/api/ProductImage/reorder/${imageId}/${direction}`, {
                   method: 'POST'
               });
               if (response.ok) {
                   location.reload();
                   localStorage.setItem('currentTab', '#images');
               }
           } catch (error) {
               console.error('Błąd:', error);
               showAlert('danger', 'Błąd podczas zmiany kolejności');
           }
        }

        async function uploadImages() {
            const input = document.getElementById('imageInput');
            const files = Array.from(input.files);
            const progressBar = document.querySelector('.progress');
            const progressBarInner = progressBar.querySelector('.progress-bar');

            if (!files.length) return;

            progressBar.style.display = 'block';
            let uploaded = 0;

            for (let file of files) {
                const formData = new FormData();
                formData.append('file', file);

                try {
                    const response = await fetch(`/api/ProductImage/upload/@Model.Id`, {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        uploaded++;
                        const progress = (uploaded / files.length) * 100;
                        progressBarInner.style.width = `${progress}%`;
                        progressBarInner.textContent = `${Math.round(progress)}%`;
                    }
                } catch (error) {
                    console.error('Błąd podczas wgrywania:', error);
                    showAlert('danger', `Błąd podczas wgrywania ${file.name}`);
                }
            }

            if (uploaded === files.length) {
                showAlert('success', 'Wszystkie pliki zostały wgrane pomyślnie');
                setTimeout(() => location.reload(), 1500);
            }
        }

        async function deleteImage(imageId) {
            if (!confirm('Czy na pewno chcesz usunąć to zdjęcie?')) return;

            try {
                const response = await fetch(`/api/ProductImage/delete/${imageId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showAlert('success', 'Zdjęcie zostało usunięte');
                    setTimeout(() => location.reload(), 1000);
                }
            } catch (error) {
                console.error('Błąd podczas usuwania:', error);
                showAlert('danger', 'Błąd podczas usuwania zdjęcia');
            }
        }

        function showAlert(type, message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 3000);
        }

        // Add tab change handler
        document.querySelectorAll('[data-bs-toggle="tab"]').forEach(tab => {
           tab.addEventListener('shown.bs.tab', function(e) {
               const targetId = e.target.getAttribute('data-bs-target');
               localStorage.setItem('currentTab', targetId);
           });
        });

        // Restore active tab on page load
        window.addEventListener('load', () => {
           const activeTab = localStorage.getItem('currentTab');
           if (activeTab) {
               const tab = document.querySelector(`[data-bs-target="${activeTab}"]`);
               if (tab) {
                   new bootstrap.Tab(tab).show();
               }
           }
        });
    </script>
}